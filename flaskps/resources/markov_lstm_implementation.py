
from flask import jsonify
# -*- coding: utf-8 -*-
"""markov_LSTM_implementation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fyPbFtj72FSyZPMbeIdYTrBvAGR8Y9qk

**Poetry Generator (RNN Markov)**

This scipt uses Recurrent Neural Networks and Markov Chains in order to generate new verses in the style of the poems that it is given as input.  The Markovify functions (Markov Chains) are used to build new sentences (based off of word1=>word2 probabilities), while the Keras.LSTM functions (Recurrent Neural Networks) are used to predict the properties of the next line of the poem (e.g. # syllables, rhyme scheme) such that an appropriate new sentence can be selected (from the setences that were generated with Markovify).  This approach is described in the following publications ([Link #1](http://www.emnlp2015.org/proceedings/EMNLP/pdf/EMNLP221.pdf), [Link #2](https://arxiv.org/pdf/1612.03205.pdf)) and many of the functions were adapted from the following script ([Link #3](https://github.com/robbiebarrat/rapping-neural-network/blob/master/model.py)).  Currently this approach does a better job at making sentences that rhyme as opposed to making sentences that are logical and as such it is best used to generate nonsensical rap lyrics similar to this verse by hip-hop artist Riff Raff:
> Spandex (spandex), I pull up with a lamb text --
> Too strudel, toaster strudel, ballin' on you poodles --
> Swish! Two cougars, 40 plus, clutching Rugers --
> Got 'em running over Jerome Bettis, Versace lettuce --
> No dieting, Gucci eyelids, I go to sleep, snobby pilots --

Here we will generate new poems using the vocabulary and rhyme structure of both Notorious B.I.G. and Lil Wayne.

Here are the first 1000 characters from the collection of poems by Notorious B.I.G.
"""

#artist_file = 'fs.txt'
#with open(artist_file) as f: # The with keyword automatically closes the file when you are done
#s    print (f.read(1000))

"""Here are the first 1000 characters from the collection of poems by Lil Wayne

Plot word frequencies for .txt files

Here we use Recurrent Neural Networks and Markov chains to generate new lyrics in the style of the input text.
The Markovify functions (Markov Chains) are used to build new sentences (based off of word1=>word2 probabilities), while the Keras.LSTM functions (Recurrent Neural Networks) are used to predict the properties of the next line of the poem (e.g. # syllables, rhyme scheme), such that an appropriate new sentence can be selected (from the setences that were generated with Markovify).
"""

#from helpers.markov-lstm.LSTM_model import create_network, train, train_model
from flaskps.helpers.markovLstm.LSTM_model import create_network, train_model, train
from flaskps.helpers.markovLstm.Lyrics_Rhyme_gen import generate_lyrics, rhymeindex, compose_rap, vectors_into_song, markov


def run_model(model, text_model,text_file, depth, wanted_word, weight_path):
  print("Generando rimas usando", wanted_word)
  bars = generate_lyrics(text_model, text_file, wanted_word)
  rhyme_list = rhymeindex(bars,weight_path)
  print("Componiendo verso usando", wanted_word)
  vectors = compose_rap(bars, rhyme_list, text_file, model)
  rap = vectors_into_song(vectors, bars, rhyme_list, wanted_word)
  return rap

"""Some important parameters to keep in mind are as follows: (1) maxsyllables: max # of syllables per line; (2) max_overlap_ratio: how different the output should be from the original input; (3) tries: how many times to try to build a line that satisifies some parameter; (4) epochs: how many times for the NN to pass over the data.

To reduce computational complexity, maximize (1) and (2) and minimize (3) and (4).  
Computational time will increase dramatically when (1) is less than 8 and when (2) is less than 0.5
"""
def do_word(word, style):
  depth = 4 
  maxsyllables = 8
  artist = "freestyle"
  rap_file = "temporary_poem.txt"

  maxsyllables = 8
  text_file = f'./flaskps/static/Datasets/merge_with_wos.txt'
  weight_path = f'./flaskps/static/{style}'
  model = create_network(depth, weight_path+f"/{style}.h5")
  #model = create_network(depth)
  text_model = markov(text_file)    
  #train_model(model, text_model, depth)

  rap = run_model(model, text_model,text_file, depth, word,weight_path)
  return jsonify({'text':rap})

